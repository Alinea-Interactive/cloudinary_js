// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = function(grunt) {
    var repo, repoTargets, repos;
    repos = ['cloudinary', 'cloudinary-jquery', 'cloudinary-jquery-file-upload'];

    /**
     * Create a task configuration that includes the given options item + a sibling for each target
     * @param {object} options - options common for all targets
     * @param {object|function} repoOptions - options specific for each repository
     * @returns {object} the task configuration
     */
    repoTargets = function(options, repoOptions) {
      var i, len, repo;
      options || (options = {});
      if (options.options == null) {
        options = {
          options: options
        };
      }
      repoOptions || (repoOptions = {});
      for (i = 0, len = repos.length; i < len; i++) {
        repo = repos[i];
        options[repo] = (typeof repoOptions === "function" ? repoOptions(repo) : void 0) || repoOptions;
      }
      return options;
    };
    grunt.initConfig({
      coffee: {
        compile: {
          expand: true,
          bare: false,
          sourceMap: true,
          cwd: 'src',
          src: ['**/*.coffee'],
          dest: 'src',
          ext: '.js'
        },
        compile_test: {
          expand: true,
          cwd: 'test/spec',
          src: ['*.coffee'],
          dest: 'test/spec',
          ext: '.js'
        }
      },
      uglify: {
        dist: {
          options: {
            sourceMap: true
          },
          files: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = repos.length; i < len; i++) {
              repo = repos[i];
              results.push({
                src: ["build/" + repo + ".js"],
                dest: 'build',
                ext: '.min.js'
              });
            }
            return results;
          })()
        }
      },
      karma: repoTargets({
        reporters: ['dots'],
        configFile: 'karma.<%= grunt.task.current.target %>.coffee'
      }),
      jsdoc: {
        amd: {
          src: ['src/**/*.js', './README.md'],
          options: {
            destination: 'doc/amd',
            template: 'template',
            configure: "jsdoc-conf.json"
          }
        },
        dist: (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = repos.length; i < len; i++) {
            repo = repos[i];
            results.push({
              src: ["build/" + repo + ".js", './README.md'],
              options: {
                destination: "doc/bower-" + repo,
                template: 'template',
                configure: "jsdoc-conf.json"
              }
            });
          }
          return results;
        })()
      },
      requirejs: repoTargets({
        baseUrl: "src",
        paths: {
          'lodash': 'empty:',
          'jquery': 'empty:',
          'jquery.ui.widget': 'empty:',
          'jquery.iframe-transport': 'empty:',
          'jquery.fileupload': 'empty:'
        },
        skipDirOptimize: true,
        optimize: "none",
        removeCombined: true,
        out: 'build/<%= grunt.task.current.target %>.js',
        name: '<%= grunt.task.current.target %>-full'
      }, function(repo) {
        var obj;
        return {
          options: {
            bundles: (
              obj = {},
              obj["" + (repo.match('jquery') ? 'util/jquery' : 'util/lodash')] = ['util'],
              obj
            )
          }
        };
      }),
      copy: {
        'backward-compatible': {
          files: [
            {
              expand: true,
              flatten: true,
              src: ["bower_components/blueimp-canvas-to-blob/js/canvas-to-blob.min.js", "bower_components/blueimp-load-image/js/load-image.all.min.js", "bower_components/blueimp-file-upload/js/jquery.fileupload-image.js", "bower_components/blueimp-file-upload/js/jquery.fileupload-process.js", "bower_components/blueimp-file-upload/js/jquery.fileupload-validate.js", "bower_components/blueimp-file-upload/js/jquery.fileupload.js", "bower_components/blueimp-file-upload/js/jquery.iframe-transport.js", "bower_components/blueimp-file-upload/js/vendor/jquery.ui.widget.js"],
              dest: "js/"
            }, {
              src: 'build/cloudinary-jquery-file-upload.js',
              dest: 'js/jquery.cloudinary.js'
            }
          ]
        },
        dist: {
          files: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = repos.length; i < len; i++) {
              repo = repos[i];
              results.push({
                'src': "build/" + repo + ".js",
                'dest': "../bower/bower-" + repo + "/" + repo + ".js"
              });
            }
            return results;
          })()
        },
        doc: {
          files: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = repos.length; i < len; i++) {
              repo = repos[i];
              results.push({
                expand: true,
                src: ["doc/bower-" + repo + "/**"],
                dest: "../bower/bower-" + repo + "/"
              });
            }
            return results;
          })()
        }
      },
      version: {
        options: {
          release: 'patch'
        },
        "package": {
          src: ['bower.json', 'package.json']
        },
        source: {
          options: {
            prefix: 'VERSION\\s+=\\s+[\'"]'
          },
          src: ['src/cloudinary.coffee']
        },
        dist: {
          files: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = repos.length; i < len; i++) {
              repo = repos[i];
              results.push({
                src: ["../bower/bower-" + repo + "/bower.json", "../bower/bower-" + repo + "/package.json"],
                dest: "../bower/bower-" + repo + "/"
              });
            }
            return results;
          })()
        }
      }
    });
    grunt.loadNpmTasks('grunt-contrib-coffee');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-requirejs');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-jsdoc');
    grunt.loadNpmTasks('grunt-karma');
    grunt.loadNpmTasks('grunt-version');
    grunt.registerTask('default', ['coffee', 'requirejs']);
    return grunt.registerTask('build', ['coffee', 'requirejs', 'jsdoc', 'copy:file-upload', 'uglify']);
  };

}).call(this);
